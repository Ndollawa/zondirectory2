type ScanLimitResult = 
 record {
   nextKey: opt text;
   results: vec record {
                  text;
                  AttributeValue;
                };
 };
type SK = text;
type Partition = 
 service {
   createOuter: (principal, OuterSubDBKey, InnerSubDBKey) ->
    (record {
       inner: record {
                principal;
                InnerSubDBKey;
              };
       outer: record {
                principal;
                OuterSubDBKey;
              };
     });
   delete: (record {
              guid: vec nat8;
              outerKey: OuterSubDBKey;
              sk: SK;
            }) -> ();
   deleteInner: (record {
                   innerKey: InnerSubDBKey;
                   sk: SK;
                 }) -> ();
   deleteSubDB: (record {
                   guid: vec nat8;
                   outerKey: OuterSubDBKey;
                 }) -> ();
   deleteSubDBInner: (record {innerKey: InnerSubDBKey;}) -> ();
   finishMovingSubDBImpl:
    (record {
       guid: vec nat8;
       index: principal;
       oldInnerKey: InnerSubDBKey;
       outerCanister: principal;
       outerKey: OuterSubDBKey;
     }) -> (principal, InnerSubDBKey);
   getByInner: (record {
                  innerKey: InnerSubDBKey;
                  sk: SK;
                }) -> (opt AttributeValue) query;
   getByOuter: (record {
                  outerKey: OuterSubDBKey;
                  sk: SK;
                }) -> (opt AttributeValue);
   getInner: (OuterSubDBKey) -> (opt record {
                                       principal;
                                       InnerSubDBKey;
                                     });
   getOwners: () -> (vec principal) query;
   getSubDBUserDataInner: (record {innerKey: InnerSubDBKey;}) -> (opt text);
   getSubDBUserDataOuter: (record {outerKey: OuterSubDBKey;}) -> (opt text);
   hasByInner: (record {
                  innerKey: InnerSubDBKey;
                  sk: SK;
                }) -> (bool) query;
   hasByOuter: (record {
                  outerKey: OuterSubDBKey;
                  sk: SK;
                }) -> (bool);
   hasSubDBByInner: (record {innerKey: InnerSubDBKey;}) -> (bool) query;
   hasSubDBByOuter: (record {outerKey: OuterSubDBKey;}) -> (bool);
   insert:
    (record {
       guid: vec nat8;
       indexCanister: principal;
       outerCanister: principal;
       outerKey: OuterSubDBKey;
       sk: SK;
       value: AttributeValue;
     }) ->
    (record {
       inner: record {
                principal;
                InnerSubDBKey;
              };
       outer: record {
                principal;
                OuterSubDBKey;
              };
     });
   isOverflowed: (record {}) -> (bool);
   putLocation: (OuterSubDBKey, principal, InnerSubDBKey) -> ();
   rawInsertSubDB: (vec record {
                          SK;
                          AttributeValue;
                        }, opt InnerSubDBKey, text) ->
    (record {inner: OuterSubDBKey;});
   rawInsertSubDBAndSetOuter: (vec record {
                                     SK;
                                     AttributeValue;
                                   },
    opt record {
          inner: InnerSubDBKey;
          outer: OuterSubDBKey;
        }, text) -> (record {
                       inner: InnerSubDBKey;
                       outer: OuterSubDBKey;
                     });
   scanLimitInner:
    (record {
       dir: Direction;
       innerKey: InnerSubDBKey;
       limit: nat;
       lowerBound: SK;
       upperBound: SK;
     }) -> (ScanLimitResult) query;
   scanLimitOuter:
    (record {
       dir: Direction;
       limit: nat;
       lowerBound: text;
       outerKey: OuterSubDBKey;
       upperBound: text;
     }) -> (ScanLimitResult);
   scanSubDBs: () ->
    (vec record {
           OuterSubDBKey;
           record {
             principal;
             InnerSubDBKey;
           };
         }) query;
   setOwners: (vec principal) -> ();
   startInsertingImpl:
    (record {
       guid: vec nat8;
       indexCanister: principal;
       innerKey: InnerSubDBKey;
       needsMove: bool;
       outerCanister: principal;
       outerKey: OuterSubDBKey;
       sk: SK;
       value: AttributeValue;
     }) -> ();
   subDBSizeByInner: (record {innerKey: InnerSubDBKey;}) -> (opt nat) query;
   subDBSizeByOuter: (record {outerKey: OuterSubDBKey;}) -> (opt nat);
   superDBSize: () -> (nat) query;
 };
type OuterSubDBKey = nat;
type InnerSubDBKey = nat;
type Direction = 
 variant {
   bwd;
   fwd;
 };
type AttributeValuePrimitive = 
 variant {
   "bool": bool;
   float: float64;
   "int": int;
   "text": text;
 };
type AttributeValue = 
 variant {
   arrayBool: vec bool;
   arrayFloat: vec float64;
   arrayInt: vec int;
   arrayText: vec text;
   "bool": bool;
   float: float64;
   "int": int;
   "text": text;
   tuple: vec AttributeValuePrimitive;
 };
service : (vec principal) -> Partition
